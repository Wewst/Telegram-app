const express = require("express");
const cors = require("cors");
const helmet = require("helmet");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3001;

// In-memory database
let db = {
  users: {},
  carts: {},
  orders: {},
  reviews: [],
  payments: [] // –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function saveDB() {
  try {
    fs.writeFileSync('db_backup.json', JSON.stringify(db, null, 2));
    console.log("üíæ Database backup saved");
  } catch (error) {
    console.error("‚ùå Error saving database:", error);
  }
}

function loadDB() {
  try {
    if (fs.existsSync('db_backup.json')) {
      const data = fs.readFileSync('db_backup.json', 'utf8');
      db = JSON.parse(data);
      console.log("üíæ Database loaded from backup");
    }
  } catch (error) {
    console.log("‚ÑπÔ∏è No existing DB found, starting fresh");
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadDB();

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(saveDB, 30000);

// ===== –ü–†–ê–í–ò–õ–¨–ù–´–ï CORS –ù–ê–°–¢–†–û–ô–ö–ò =====
app.use(cors({
  origin: "*",
  methods: ["GET", "POST", "DELETE", "PUT", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With", "Accept"],
  credentials: true,
  preflightContinue: false,
  optionsSuccessStatus: 204
}));

app.options('*', cors());
app.use(helmet());
app.use(express.json({ limit: "2mb" }));

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
  
  if (['POST', 'PUT'].includes(req.method) && req.body && Object.keys(req.body).length > 0) {
    console.log('Request body:', JSON.stringify(req.body));
  }
  
  next();
});

// --- Health check ---
app.get("/health", (req, res) => {
  res.json({ 
    status: "ok", 
    message: "Telegram Mini App Backend is running!",
    timestamp: new Date().toISOString(),
    reviewsCount: db.reviews.length,
    usersCount: Object.keys(db.users).length,
    cartsCount: Object.keys(db.carts).length,
    paymentsCount: db.payments.length
  });
});

// --- Users ---
app.post("/users", (req, res) => {
  try {
    const userData = req.body || {};
    const telegramId = String(userData.telegramId || userData.id || "");
    
    if (!telegramId) {
      return res.status(400).json({ error: "Missing telegramId" });
    }

    const existingUser = db.users[telegramId];
    
    if (existingUser) {
      db.users[telegramId] = {
        ...existingUser,
        balance: userData.balance !== undefined ? userData.balance : existingUser.balance,
        username: userData.username || existingUser.username,
        firstName: userData.firstName || existingUser.firstName,
        lastName: userData.lastName || existingUser.lastName,
        avatarUrl: userData.avatarUrl || existingUser.avatarUrl,
        updatedAt: new Date().toISOString()
      };
    } else {
      db.users[telegramId] = {
        id: telegramId,
        telegramId: telegramId,
        username: userData.username || "",
        firstName: userData.firstName || "",
        lastName: userData.lastName || "",
        avatarUrl: userData.avatarUrl || null,
        joinDate: new Date().toISOString(),
        balance: userData.balance !== undefined ? userData.balance : 0,
        createdAt: new Date().toISOString()
      };
    }
    
    console.log("‚úÖ User saved:", telegramId);
    res.json(db.users[telegramId]);
    
  } catch (error) {
    console.error("‚ùå Error saving user:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/users/:telegramId/balance", (req, res) => {
  try {
    const telegramId = String(req.params.telegramId);
    const user = db.users[telegramId];
    
    if (!user) {
      return res.status(404).json({ error: "User not found", balance: 0 });
    }

    res.json({ 
      success: true,
      balance: user.balance || 0 
    });
    
  } catch (error) {
    console.error("‚ùå Balance fetch error:", error);
    res.status(500).json({ error: "Internal server error", balance: 0 });
  }
});

// ===== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ß–ï–†–ï–ó –°–ë–ü =====

// 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
app.post("/payments/create", (req, res) => {
  try {
    const { telegramId, amount, bank } = req.body;
    
    if (!telegramId || !amount || amount < 10) {
      return res.status(400).json({ 
        success: false, 
        error: "Invalid parameters. Minimum amount: 10" 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!db.users[telegramId]) {
      db.users[telegramId] = {
        telegramId: telegramId,
        balance: 0,
        createdAt: new Date().toISOString()
      };
    }

    const paymentId = Date.now().toString();
    const payment = {
      id: paymentId,
      telegramId: telegramId,
      amount: Number(amount),
      bank: bank || 'other',
      status: 'pending', // pending, completed, failed, expired
      receiverCard: '2200702019610646', // –í–∞—à–∞ –∫–∞—Ä—Ç–∞
      comment: `FollenShaid ID:${telegramId}`, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      createdAt: new Date().toISOString(),
      expiresAt: new Date(Date.now() + 10 * 60 * 1000).toISOString() // 10 –º–∏–Ω—É—Ç
    };

    db.payments.push(payment);
    
    console.log("üí∞ Payment request created:", { 
      paymentId, telegramId, amount, bank 
    });

    res.json({
      success: true,
      paymentId: paymentId,
      payment: payment,
      message: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω"
    });

  } catch (error) {
    console.error("‚ùå Payment creation error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint)
app.post("/payments/check", (req, res) => {
  try {
    const { telegramId, amount, timestamp } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId",
        verified: false 
      });
    }

    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    const userPayments = db.payments.filter(payment => 
      payment.telegramId === telegramId && 
      new Date(payment.createdAt) >= tenMinutesAgo
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    const completedPayment = userPayments.find(payment => 
      payment.status === 'completed' && 
      payment.amount === Number(amount)
    );

    if (completedPayment) {
      console.log("‚úÖ Payment verified:", { 
        telegramId, amount, paymentId: completedPayment.id 
      });
      
      // –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
      if (db.users[telegramId]) {
        db.users[telegramId].balance += Number(amount);
        db.users[telegramId].updatedAt = new Date().toISOString();
        
        // –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
        completedPayment.processed = true;
        completedPayment.processedAt = new Date().toISOString();
        
        console.log("üí∞ Balance updated:", {
          telegramId, 
          amount, 
          newBalance: db.users[telegramId].balance 
        });
      }

      return res.json({ 
        success: true, 
        verified: true,
        paymentId: completedPayment.id,
        newBalance: db.users[telegramId] ? db.users[telegramId].balance : 0
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const now = new Date();
    userPayments.forEach(payment => {
      if (payment.status === 'pending' && new Date(payment.expiresAt) < now) {
        payment.status = 'expired';
        console.log("‚è∞ Payment expired:", payment.id);
      }
    });

    res.json({ 
      success: true, 
      verified: false,
      message: "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    });

  } catch (error) {
    console.error("‚ùå Payment check error:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      verified: false 
    });
  }
});

// 3. –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.post("/payments/confirm", (req, res) => {
  try {
    const { paymentId, amount, receiverCard, comment } = req.body;
    
    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ ID –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    let payment;
    
    if (paymentId) {
      payment = db.payments.find(p => p.id === paymentId);
    } else if (amount && receiverCard) {
      // –ò—â–µ–º –ø–æ —Å—É–º–º–µ –∏ –∫–∞—Ä—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
      payment = db.payments.find(p => 
        p.amount === Number(amount) && 
        p.receiverCard === receiverCard &&
        p.status === 'pending'
      );
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      if (comment && payment) {
        if (!payment.comment.includes(comment)) {
          payment = null;
        }
      }
    }

    if (!payment) {
      return res.status(404).json({ 
        success: false, 
        error: "Payment not found" 
      });
    }

    if (payment.status !== 'pending') {
      return res.status(400).json({ 
        success: false, 
        error: `Payment already ${payment.status}` 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    payment.status = 'completed';
    payment.completedAt = new Date().toISOString();
    
    // –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
    if (db.users[payment.telegramId]) {
      db.users[payment.telegramId].balance += payment.amount;
      db.users[payment.telegramId].updatedAt = new Date().toISOString();
    }

    console.log("‚úÖ Payment confirmed:", { 
      paymentId: payment.id, 
      telegramId: payment.telegramId,
      amount: payment.amount 
    });

    res.json({
      success: true,
      payment: payment,
      newBalance: db.users[payment.telegramId] ? db.users[payment.telegramId].balance : 0
    });

  } catch (error) {
    console.error("‚ùå Payment confirmation error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// 4. –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/payments/user/:telegramId", (req, res) => {
  try {
    const telegramId = String(req.params.telegramId);
    const limit = parseInt(req.query.limit) || 10;
    
    const userPayments = db.payments
      .filter(payment => payment.telegramId === telegramId)
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, limit);

    res.json({
      success: true,
      payments: userPayments,
      total: db.payments.filter(p => p.telegramId === telegramId).length
    });

  } catch (error) {
    console.error("‚ùå Payments history error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
app.post("/payments/cleanup", (req, res) => {
  try {
    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const initialCount = db.payments.length;
    
    db.payments = db.payments.filter(payment => 
      new Date(payment.createdAt) > dayAgo
    );
    
    const removedCount = initialCount - db.payments.length;
    console.log("üßπ Payments cleanup completed:", { removed: removedCount, remaining: db.payments.length });

    res.json({
      success: true,
      removed: removedCount,
      remaining: db.payments.length
    });

  } catch (error) {
    console.error("‚ùå Payments cleanup error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// ===== –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====

// 1. –ü–û–õ–£–ß–ò–¢–¨ –∫–æ—Ä–∑–∏–Ω—É (GET)
app.get("/cart/get", (req, res) => {
  try {
    const telegramId = req.query.telegramId;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId parameter",
        cart: []
      });
    }

    const cartItems = db.carts[telegramId] || [];
    
    console.log("üì¶ Cart loaded for user:", telegramId, "items:", cartItems.length);
    
    res.json({
      success: true,
      cart: cartItems,
      count: cartItems.length,
      total: cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    });
    
  } catch (error) {
    console.error("‚ùå CART GET ERROR:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      cart: []
    });
  }
});

// 2. –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ—Ä–∑–∏–Ω—É (POST)
app.post("/cart/add", (req, res) => {
  try {
    const { telegramId, productId, name, price, quantity, image } = req.body;
    
    console.log("üõí Add to cart request:", { telegramId, productId });
    
    if (!telegramId || !productId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId or productId",
        cart: []
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!db.users[telegramId]) {
      db.users[telegramId] = {
        telegramId: telegramId,
        balance: 0,
        createdAt: new Date().toISOString()
      };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!db.carts[telegramId]) {
      db.carts[telegramId] = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const existingItemIndex = db.carts[telegramId].findIndex(
      item => item.productId == productId
    );

    if (existingItemIndex >= 0) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      db.carts[telegramId][existingItemIndex].quantity += quantity || 1;
      console.log("üìä Item quantity updated:", db.carts[telegramId][existingItemIndex].quantity);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      const newItem = {
        productId: productId,
        name: name || "Unknown Product",
        price: price || 0,
        quantity: quantity || 1,
        image: image || null,
        addedAt: new Date().toISOString()
      };
      db.carts[telegramId].push(newItem);
      console.log("üÜï New item added to cart:", newItem);
    }

    res.json({
      success: true,
      message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
      cart: db.carts[telegramId],
      count: db.carts[telegramId].length
    });
    
  } catch (error) {
    console.error("‚ùå CART ADD ERROR:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      cart: []
    });
  }
});

// 3. –û–ë–ù–û–í–ò–¢–¨ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (POST)
app.post("/cart/update", (req, res) => {
  try {
    const { telegramId, productId, quantity } = req.body;
    
    console.log("üîÑ Update cart request:", { telegramId, productId, quantity });
    
    if (!telegramId || !productId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId or productId",
        cart: []
      });
    }

    if (!db.carts[telegramId]) {
      return res.status(404).json({ 
        success: false, 
        error: "Cart not found",
        cart: []
      });
    }

    const itemIndex = db.carts[telegramId].findIndex(
      item => item.productId == productId
    );

    if (itemIndex === -1) {
      return res.status(404).json({ 
        success: false, 
        error: "Item not found in cart",
        cart: []
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    db.carts[telegramId][itemIndex].quantity += quantity;

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    if (db.carts[telegramId][itemIndex].quantity <= 0) {
      db.carts[telegramId].splice(itemIndex, 1);
      console.log("üóë Item removed from cart");
    } else {
      console.log("üìä Item quantity updated to:", db.carts[telegramId][itemIndex].quantity);
    }

    res.json({
      success: true,
      cart: db.carts[telegramId],
      count: db.carts[telegramId].length
    });
    
  } catch (error) {
    console.error("‚ùå CART UPDATE ERROR:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      cart: []
    });
  }
});

// 4. –£–î–ê–õ–ò–¢–¨ —Ç–æ–≤–∞—Ä (POST)
app.post("/cart/remove", (req, res) => {
  try {
    const { telegramId, productId } = req.body;
    
    console.log("‚ùå Remove from cart request:", { telegramId, productId });
    
    if (!telegramId || !productId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId or productId",
        cart: []
      });
    }

    if (!db.carts[telegramId]) {
      return res.status(404).json({ 
        success: false, 
        error: "Cart not found",
        cart: []
      });
    }

    const initialLength = db.carts[telegramId].length;
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    db.carts[telegramId] = db.carts[telegramId].filter(
      item => item.productId != productId
    );

    console.log("üóë Item removed, cart size:", initialLength, "->", db.carts[telegramId].length);

    res.json({
      success: true,
      cart: db.carts[telegramId],
      count: db.carts[telegramId].length,
      message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    });
    
  } catch (error) {
    console.error("‚ùå CART REMOVE ERROR:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      cart: []
    });
  }
});

// 5. –û–ß–ò–°–¢–ò–¢–¨ –∫–æ—Ä–∑–∏–Ω—É (POST)
app.post("/cart/clear", (req, res) => {
  try {
    const { telegramId } = req.body;
    
    console.log("üßπ Clear cart request for user:", telegramId);
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: "Missing telegramId",
        cart: []
      });
    }

    const cartItemsCount = db.carts[telegramId] ? db.carts[telegramId].length : 0;
    db.carts[telegramId] = [];
    
    console.log("‚úÖ Cart cleared, removed", cartItemsCount, "items");

    res.json({
      success: true,
      message: "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
      cart: [],
      count: 0,
      removedItems: cartItemsCount
    });
    
  } catch (error) {
    console.error("‚ùå CART CLEAR ERROR:", error);
    res.status(500).json({ 
      success: false, 
      error: "Internal server error",
      cart: []
    });
  }
});

// --- Balance operations (—Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
app.post("/users/:telegramId/balance/add", (req, res) => {
  try {
    const telegramId = String(req.params.telegramId);
    const { amount } = req.body;
    
    if (!db.users[telegramId]) {
      db.users[telegramId] = {
        telegramId: telegramId,
        balance: 0,
        createdAt: new Date().toISOString()
      };
    }
    
    if (!amount || amount <= 0) {
      return res.status(400).json({ error: "Invalid amount" });
    }
    
    const currentBalance = db.users[telegramId].balance || 0;
    const newBalance = currentBalance + (Number(amount) || 0);

    db.users[telegramId].balance = newBalance;
    db.users[telegramId].updatedAt = new Date().toISOString();

    console.log("üí∞ Balance added:", { telegramId, amount, newBalance });
    res.json({ success: true, newBalance });
    
  } catch (error) {
    console.error("‚ùå Balance add error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.post("/users/:telegramId/balance/subtract", (req, res) => {
  try {
    const telegramId = String(req.params.telegramId);
    const { amount } = req.body;
    
    if (!db.users[telegramId]) {
      return res.status(404).json({ error: "User not found" });
    }
    
    if (!amount || amount <= 0) {
      return res.status(400).json({ error: "Invalid amount" });
    }
    
    if (db.users[telegramId].balance < amount) {
      return res.status(400).json({ error: "Insufficient balance" });
    }
    
    db.users[telegramId].balance -= amount;
    
    console.log("üí∞ Balance subtracted:", { user: telegramId, amount, newBalance: db.users[telegramId].balance });
    res.json({ success: true, newBalance: db.users[telegramId].balance });
    
  } catch (error) {
    console.error("‚ùå Balance subtract error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// --- Orders ---
app.post("/orders", (req, res) => {
  try {
    const { telegramId, items, total, status } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ error: "Missing telegramId" });
    }

    const orderId = Date.now().toString();
    
    db.orders[orderId] = {
      orderId,
      telegramId,
      items: items || [],
      total: total || 0,
      status: status || "completed",
      orderDate: new Date().toISOString()
    };
    
    console.log("üì¶ Order created:", { orderId, user: telegramId, total, itemsCount: items ? items.length : 0 });
    res.json({ success: true, orderId });
    
  } catch (error) {
    console.error("‚ùå Order creation error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// --- Reviews ---
app.post("/reviews", (req, res) => {
  try {
    const reviewData = req.body || {};
    const telegramId = String(reviewData.userId || reviewData.telegramId || "");
    
    console.log("üìù Review submission:", { telegramId, textLength: reviewData.text ? reviewData.text.length : 0 });
    
    if (!telegramId) {
      return res.status(400).json({ error: "User ID is required" });
    }
    
    if (!reviewData.text || reviewData.text.trim().length < 5) {
      return res.status(400).json({ error: "Review text must be at least 5 characters" });
    }

    const existingReviewIndex = db.reviews.findIndex(review => review.userId === telegramId);
    if (existingReviewIndex >= 0) {
      return res.status(400).json({ error: "User has already submitted a review" });
    }

    const newReview = {
      id: Date.now().toString(),
      userId: telegramId,
      author: reviewData.author || "User_" + telegramId.slice(-4),
      text: reviewData.text.trim(),
      rating: reviewData.rating || 5,
      date: new Date().toLocaleDateString('ru-RU'),
      timestamp: Date.now(),
      avatarText: (reviewData.author || "U").charAt(0).toUpperCase()
    };

    db.reviews.unshift(newReview);
    console.log("‚úÖ New review added, total:", db.reviews.length);

    res.json({ success: true, review: newReview });

  } catch (error) {
    console.error("‚ùå REVIEW ERROR:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.get("/reviews", (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50;
    
    const sortedReviews = db.reviews.sort((a, b) => b.timestamp - a.timestamp);
    
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedReviews = sortedReviews.slice(startIndex, endIndex);

    res.json({
      success: true,
      reviews: paginatedReviews,
      total: db.reviews.length,
      page,
      totalPages: Math.ceil(db.reviews.length / limit)
    });

  } catch (error) {
    console.error("‚ùå REVIEWS LOAD ERROR:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.get("/reviews/user/:telegramId", (req, res) => {
  try {
    const telegramId = String(req.params.telegramId);
    
    const userReview = db.reviews.find(review => review.userId === telegramId);
    res.json({ success: true, hasReviewed: !!userReview });

  } catch (error) {
    console.error("‚ùå USER REVIEW CHECK ERROR:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// --- Debug ---
app.get("/debug", (req, res) => {
  res.json({
    success: true,
    usersCount: Object.keys(db.users).length,
    cartsCount: Object.keys(db.carts).length,
    ordersCount: Object.keys(db.orders).length,
    reviewsCount: db.reviews.length,
    paymentsCount: db.payments.length,
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime()
  });
});

// --- Start server ---
app.listen(PORT, () => {
  console.log(`üöÄ Backend running on port ${PORT}`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`üí∞ New Payment endpoints:`);
  console.log(`   POST /payments/create - –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ`);
  console.log(`   POST /payments/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞`);
  console.log(`   POST /payments/confirm - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (–∞–¥–º–∏–Ω)`);
  console.log(`   GET  /payments/user/:id - –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π`);
  console.log(`‚≠êÔ∏è Reviews API: http://localhost:${PORT}/reviews`);
  console.log(`üõí Cart endpoints available`);
  console.log(`üìä Total reviews in DB: ${db.reviews.length}`);
  console.log(`üë• Total users: ${Object.keys(db.users).length}`);
  console.log(`üí≥ Total payments: ${db.payments.length}`);
});
